#!/bin/bash
cmk sync

# assumes presence of jq and cloudmonkey
# and template names set and CKS API enabled

# add min CKS service offering

cmk create serviceoffering cpunumber={{ min_cks_service_offering.cpunumber }} cpuspeed={{ min_cks_service_offering.cpuspeed }} displaytext='{{ min_cks_service_offering.displaytext }}' memory={{ min_cks_service_offering.memory }} name='{{ min_cks_service_offering.name }}' offerha={{ min_cks_service_offering.offerha }}


# upload versions
{% for item in cks_version %}
cmk add kubernetessupportedversion semanticversion={{ item.semantic_version }} url={{ item.url }} mincpunumber=2 minmemory=2048
{% endfor %}

# Get CoreOS UUID
COREOS_UUID=`cmk list ostypes description="CoreOS" | jq -r '.ostype[].id'`

# upload template(s)
if  [ "{{ xs_ver | lower }}" != "na" ]; then
  cmk register template name=Kubernetes-CoreOS-xenserver displaytext=Kubernetes-CoreOS-xenserver url={{ env_cks_coreos_template_xenserver }} zoneids=-1 format=VHD isextractable=false passwordenabled=false isdynamicallyscalable=false ostypeid=$COREOS_UUID hypervisor=XenServer ispublic=true isfeatured=false isrouting=false
fi
if  [ "{{ kvm_os | lower }}" != "na" ]; then
  cmk register template cmk register template name=Kubernetes-CoreOS-kvm displaytext=Kubernetes-CoreOS-kvm url={{ env_cks_coreos_template_kvm }} zoneids=-1 format=QCOW2 isextractable=false passwordenabled=false isdynamicallyscalable=false ostypeid=$COREOS_UUID hypervisor=KVM ispublic=true isfeatured=false isrouting=false
fi
if [ "{{ vmware_ver | lower }}" != "na" ]; then
  cmk register template name=Kubernetes-CoreOS-vmware displaytext=Kubernetes-CoreOS-vmware url={{ env_cks_coreos_template_vmware }} zoneids=-1 format=OVA isextractable=false passwordenabled=false isdynamicallyscalable=false ostypeid=$COREOS_UUID hypervisor=VMware ispublic=true isfeatured=false isrouting=false details[0].rootDiskController=pvscsi details[0].nicAdapter=Vmxnet3
fi
 
