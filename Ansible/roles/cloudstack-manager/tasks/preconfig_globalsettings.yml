---

- name: determine number of db hosts
  set_fact: num_db_hosts="{{ groups['mysql_hosts'] | length }}"

- name: set mysql_master_ip
  set_fact: mysql_master_ip={{ (num_db_hosts | int == 0) | ternary("{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}","{{ hostvars[groups['mysql_master_host'][0]]['ansible_ssh_host'] }}") }}

- name: preset some global settings
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings.all }}"
  when: ("primary_cs_manager" in group_names)
  tags:
    - "global_settings"

- name: preset some global settings
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings.marvin }}"
  when: (build_marvin) and ("primary_cs_manager" in group_names)
  tags:
    - "global_settings"

- name: preset some global settings
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings.systemvmlocalstorage }}"
  when: ("primary_cs_manager" in group_names) and use_local_storage_systemvms
  tags:
    - "global_settings"

- name: Overwrite built-in template location
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.vm_template SET url='{{ item.url }}' WHERE id='{{ item.id }}';"
  with_items:
  - "{{ local_builtin_templates }}"
  when: use_local_templates and ("primary_cs_manager" in group_names)
  tags:
    - "global_settings"

- name: Modify Xen Templates to stop dymanic scaling **** TEMPORARY HACK *****
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.vm_template SET dynamically_scalable='0' WHERE id='5';"
  when: xs_ver not in xs_dyn_scaling_ok_vers and ("primary_cs_manager" in group_names)
  tags:
    - "global_settings"


- name: Boost SSVM offering when using VMWare
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.service_offering SET {{ item.field}}='{{ item.value }}' WHERE vm_type='secondarystoragevm';"
  with_items:
  - {field: "ram_size", value: "2048"}
  - {field: "cpu", value: "2"}
  when: ( env_hv == "vmware" )
  tags:
    - "global_settings"

- name: Set SSVM to use jumbo frames when using vmware
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - {name: "secstorage.vm.mtu.size", value: "1500"}
  when: ( env_hv == "vmware" )
  tags:
    - "global_settings"

- name: Configure SSL settings for system VMs
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - {name: "secstorage.encrypt.copy", value: "true"}
  - {name: "consoleproxy.sslEnabled", value: "true"}
  - {name: "consoleproxy.url.domain", value: "{{ systemvm_url }}"}
  - {name: "secstorage.ssl.cert.domain", value: "{{ systemvm_url }}"}
  when: ssl_systemvm | bool

- name: preset some global settings for CKS
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings.cks }}"
  when: ("primary_cs_manager" in group_names) and (env_enable_cks|bool == True)
  tags:
    - "global_settings"

- name: test for cloudstack-utils.jar
  stat: path=/usr/share/cloudstack-common/lib/cloudstack-utils.jar
  register: path_is_cloudstack_utils_jar

- name: Generate new cm_secretkey_enc
  shell: java -classpath /usr/share/cloudstack-common/lib/cloudstack-utils.jar com.cloud.utils.crypt.EncryptionCLI -p password -i {{ cm_secretkey }}
  register: cm_secretkey_enc_result
  when: path_is_cloudstack_utils_jar.stat.exists and (encryptor_version in ["default", "V2", "V1_AND_V2"])

- name: Update cm_secretkey_enc
  set_fact: cm_secretkey_enc="{{ cm_secretkey_enc_result.stdout }}"
  when: cm_secretkey_enc_result is defined and cm_secretkey_enc_result.stdout is defined

- debug: msg="api_key = {{ cm_apikey }}, cm_secretkey_enc = {{ cm_secretkey_enc }}"

- name: add admin keys for cloudmonkey
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE `cloud`.`user` SET `api_key`='{{ cm_apikey }}', `secret_key`='{{ cm_secretkey_enc }}' WHERE `id`='2';"

- name: test for cloud or cloudstack Usage
  stat: path=/etc/init.d/cloudstack-management
  register: path_is_cloudstack

- name: restart mgmt service (inc fix for broken stop)
  shell: "service cloud-management stop && sleep 5 && service cloud-management stop && sleep 10 && service cloud-management start"
  when: (path_is_cloudstack.stat.exists == False) and (ansible_distribution_major_version == "6")
# ignore_errors: true

- name: restart mgmt service (shell, due to module failing atm on Ubuntu20)
  shell: "systemctl restart cloudstack-management"
  when: ansible_distribution_major_version != "6"
# ignore_errors: true
