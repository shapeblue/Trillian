---

- name: determine number of db hosts
  set_fact: num_db_hosts="{{ groups['mysql_hosts'] | length }}"

- name: set mysql_master_ip
  set_fact: mysql_master_ip={{ (num_db_hosts | int == 0) | ternary("{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}","{{ hostvars[groups['mysql_master_host'][0]]['ansible_ssh_host'] }}") }}

- name: preset some global settings
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings }}"
  when: ( item.condition == "all" )
  tags:
    - "global_settings"

- name: preset some global settings
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings }}"
  when: ( item.condition == "marvin" ) and build_marvin
  tags:
    - "global_settings"

- name: Overwrite built-in template location
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.vm_template SET url='{{ item.url }}' WHERE id='{{ item.id }}';"
  with_items:
  - "{{ local_builtin_templates }}"
  when: use_local_templates
  tags:
    - "global_settings"

- name: add admin keys for cloudmonkey
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE `cloud`.`user` SET `api_key`='{{ cm_apikey }}', `secret_key`='{{ cm_secretkey_enc }}' WHERE `id`='2';"

- name: test for cloud or cloudstack Usage
  stat: path=/etc/rc.d/init.d/cloudstack-management
  register: path_is_cloudstack

- name: restart mgmt service (inc fix for broken stop)
  shell: "service cloudstack-management stop && sleep 5 && service cloudstack-management stop && sleep 10 && service cloudstack-management start"
  when: (path_is_cloudstack.stat.exists == True) and (ansible_distribution_major_version == "6")
  ignore_errors: true

- name: restart mgmt service (inc fix for broken stop)
  shell: "service cloud-management stop && sleep 5 && service cloud-management stop && sleep 10 && service cloud-management start"
  when: (path_is_cloudstack.stat.exists == False) and (ansible_distribution_major_version == "6")
  ignore_errors: true

- name: restart mgmt service (centos7 - systemctl)
  service: name=cloudstack-management state=restarted
  when: ansible_distribution_major_version == "7"
  ignore_errors: true
