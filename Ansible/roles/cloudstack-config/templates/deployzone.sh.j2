#!/bin/bash
################################################################################
# deployzone.sh
# Populated by Ansible as part of deployvms.yml playbook.

################################################################################
# Vars / constants
DEPLOYLOG="/tmp/{{ env_name_clean }}-deployzone.log";
SECGROUP=`echo "{{ env_zone_secgroups }}" | grep -Ei 'yes|true'`
if [[ -n $SECGROUP ]]; then
  SECURITYGROUPENABLED="true"
else
  SECURITYGROUPENABLED="false"
fi
################################################################################
# Write to log file + console
function WriteOutput()
{
  local LogTimestamp;
  LogTimestamp=`date +"%Y-%m-%d %H:%M:%S"`;
  echo -e "$*"
  echo ${LogTimestamp} "$*" >> ${DEPLOYLOG};
}

WriteOutput "Checking login.";
AccountCheck=`cloudmonkey list accounts name=admin | grep -i error`;
if [ -z ${AccountCheck} ];
then
  WriteOutput "Admin account found. Good to go.";
else
  WriteOutput "Unable to log in, please check CloudStack installation.";
  exit 1;
fi

WriteOutput "Checking if zone exists."
ZoneCheck=`cloudmonkey list zones`;
if [ -z ${ZoneCheck} ];
then
  WriteOutput "No zone exists. Good to go."
else
  WriteOutput "Zone already present, bailing out."
  exit 1
fi

if [ "{{ env_zonetype | lower }}" == "advanced" ];
then
  WriteOutput "Creating advanced zone - {{ env_name_clean }}";
  ZoneID=`cloudmonkey create zone networktype=Advanced securitygroupenabled=${SECURITYGROUPENABLED} guestcidraddress={{ env_zone_guestcidr }} name={{ env_name_clean }} dns1={{ env_zone_dns1 }} dns2={{ env_zone_dns2 }} internaldns1={{ env_zone_intdns1 }} internaldns2={{ env_zone_intdns2 }} localstorageenabled={{ use_local_storage }} | jq -c -r '.zone.id'`;
  WriteOutput "Zone created with ID ${ZoneID}.";
  WriteOutput "Creating physical network - Management.";
  cloudmonkey create physicalnetwork zoneid=${ZoneID} name='Physical Network Mgmt' isolationmethods='VLAN' | tee -i -a ${DEPLOYLOG};
  WriteOutput "Creating Physical Network - Guest / Public.";
  cloudmonkey create physicalnetwork zoneid=${ZoneID} name='Physical Network Guest Public' isolationmethods='VLAN' | tee -i -a ${DEPLOYLOG};
  PhysNetMgmtID=`cloudmonkey list physicalnetworks name="Physical Network Mgmt" | jq '.physicalnetwork[] | .id'`;
  PhysNetPubID=`cloudmonkey list physicalnetworks name="Physical Network Guest Public" | jq '.physicalnetwork[] | .id'`;
  PhysNetGuestID=`cloudmonkey list physicalnetworks name="Physical Network Guest Public" | jq '.physicalnetwork[] | .id'`;
  WriteOutput "Physical network - Management created with ID = ${PhysNetMgmtID}";
  WriteOutput "Physical network - Public created with ID = ${PhysNetPubID}";
  WriteOutput "Physical network - Guest created with ID = ${PhysNetGuestID}";
  {% if not env_zone_secgroups | bool %}
  WriteOutput "Adding Traffic Type - Public (Advanced Network).";
  {% if env_numversion | version_compare('4.2','>') %}
  {% if esxi_use_dvswitch %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetPubID} traffictype='Public' xennetworklabel='{{ xs_public_network_label }}' vmwarenetworklabel='{{ esxi_public_dvs_network_label }},,vmwaredvs' kvmnetworklabel='{{ kvm_public_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% else %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetPubID} traffictype='Public' xennetworklabel='{{ xs_public_network_label }}' vmwarenetworklabel='{{ esxi_public_network_label }},,vmwaresvs' kvmnetworklabel='{{ kvm_public_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% endif %}
  {% else %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetPubID} traffictype='Public' xennetworklabel='{{ xs_public_network_label }}' vmwarenetworklabel='{{ esxi_public_network_label }}' kvmnetworklabel='{{ kvm_public_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% endif %}
  {% else %}
  WriteOutput "Skipping public network - advanced zone with security groups.";
  {% endif %}
  WriteOutput "Adding Traffic Type - Guest (Advanced Network)";
  {% if env_numversion | version_compare('4.2','>') %}
  {% if esxi_use_dvswitch %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetGuestID} traffictype='Guest' xennetworklabel='{{ xs_guest_network_label }}' vmwarenetworklabel='{{ esxi_guest_dvs_network_label }},,vmwaredvs' kvmnetworklabel='{{ kvm_guest_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% else %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetGuestID} traffictype='Guest' xennetworklabel='{{ xs_guest_network_label }}' vmwarenetworklabel='{{ esxi_guest_network_label }},,vmwaresvs' kvmnetworklabel='{{ kvm_guest_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% endif %}
  {% else %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetGuestID} traffictype='Guest' xennetworklabel='{{ xs_guest_network_label }}' vmwarenetworklabel='{{ esxi_guest_network_label }}' kvmnetworklabel='{{ kvm_guest_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% endif %}
else
  WriteOutput "Creating basic zone - {{ env_name_clean }}";
  ZoneID=`cloudmonkey create zone networktype=Basic securitygroupenabled=${SECURITYGROUPENABLED} name={{ env_name_clean }} dns1={{ env_zone_dns1 }} internaldns1={{ env_zone_intdns1 }} internaldns2={{ env_zone_intdns2 }} localstorageenabled={{ use_local_storage }} | jq -c -r '.zone.id'`;
  WriteOutput "Zone created with ID ${ZoneID}.";
  WriteOutput "Creating physical network.";
  cloudmonkey create physicalnetwork zoneid=${ZoneID} name='Physical Network' | tee -i -a ${DEPLOYLOG};
  PhysNetMgmtID=`cloudmonkey list physicalnetworks name="Physical Network" | jq '.physicalnetwork[] | .id'`;
  WriteOutput "Physical network - Management created with ID = ${PhysNetMgmtID}";
  WriteOutput "Adding Traffic Type - Guest( Basic Network)";
  {% if env_numversion | version_compare('4.2','>') %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetMgmtID} traffictype='Guest' xennetworklabel='{{ xs_guest_network_label }}' vmwarenetworklabel='{{ esxi_guest_network_label }},11,vmwaresvs' kvmnetworklabel='{{ kvm_guest_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% else %}
  cloudmonkey add traffictype physicalnetworkid=${PhysNetMgmtID} traffictype='Guest' xennetworklabel='{{ xs_guest_network_label }}' vmwarenetworklabel='{{ esxi_guest_network_label }}' kvmnetworklabel='{{ kvm_guest_network_label }}' | tee -i -a ${DEPLOYLOG};
  {% endif %}
fi
WriteOutput "Adding Traffic Type - Management";
{% if env_numversion | version_compare('4.2','>') %}
{% if esxi_use_mgmt_dvswitch %}
cloudmonkey add traffictype physicalnetworkid=${PhysNetMgmtID} traffictype='Management' xennetworklabel='{{ xs_mgmt_network_label }}' vmwarenetworklabel='{{ esxi_mgmt_dvs_network_label }},,vmwaredvs' kvmnetworklabel='{{ kvm_mgmt_network_label }}'  | tee -i -a ${DEPLOYLOG};
{% else %}
cloudmonkey add traffictype physicalnetworkid=${PhysNetMgmtID} traffictype='Management' xennetworklabel='{{ xs_mgmt_network_label }}' vmwarenetworklabel='{{ esxi_mgmt_network_label }},,vmwaresvs' kvmnetworklabel='{{ kvm_mgmt_network_label }}'  | tee -i -a ${DEPLOYLOG};
{% endif %}
{% else %}
cloudmonkey add traffictype physicalnetworkid=${PhysNetMgmtID} traffictype='Management' xennetworklabel='{{ xs_mgmt_network_label }}' vmwarenetworklabel='{{ esxi_mgmt_network_label }}' kvmnetworklabel='{{ kvm_mgmt_network_label }}'  | tee -i -a ${DEPLOYLOG};
{% endif %}
PhysNetArray=`cloudmonkey list physicalnetworks filter=id | jq '.physicalnetwork[] | .id'`;
for i in ${PhysNetArray};
do
  WriteOutput "Enabling Physical Network ${i}";
  cloudmonkey update physicalnetwork state='Enabled' id=${i}  | tee -i -a ${DEPLOYLOG};
done

if [ "{{ env_zonetype | lower }}" == "advanced" ];
then
  NetProvArrayAdv=`cloudmonkey list networkserviceproviders filter=name,id | jq '.networkserviceprovider[] | select(.name!="SecurityGroupProvider") | .id' | tr " " "\n"`;
  IntLBArrayAdv=`cloudmonkey list internalloadbalancerelements filter=name,id | jq '.internalloadbalancerelement[] | .id' | tr " " "\n"`;
  VRArrayAdv=`cloudmonkey list virtualrouterelements filter=name,id | jq '.virtualrouterelement[] | .id' | tr " " "\n"`;
  SecGrpArrayAdv=`cloudmonkey list networkserviceproviders filter=name,id | jq '.networkserviceprovider[] | select(.name=="SecurityGroupProvider") | .id' | tr " " "\n"`;
  for i in ${IntLBArrayAdv};
  do
    WriteOutput "Enabling internalloadbalancerelements ${i}";
    cloudmonkey configure internalloadbalancerelement enabled='true' id=${i} | tee -i -a ${DEPLOYLOG};
  done
  for i in ${VRArrayAdv};
  do
    WriteOutput "Enabling virtualrouterelement ${i}";
    cloudmonkey configure virtualrouterelement enabled='true' id=${i} | tee -i -a ${DEPLOYLOG};
  done
  for i in ${NetProvArrayAdv};
  do
    WriteOutput "Enabling networkserviceprovider ${i}";
    cloudmonkey update networkserviceprovider state='Enabled' id=${i} | tee -i -a ${DEPLOYLOG};
  done
  if [ "${SECURITYGROUPENABLED}" == "true" ];
  then
    WriteOutput "Configuring zone with security groups.";
    for i in ${SecGrpArrayAdv};
    do
      WriteOutput "Enabling security group provider ${i}";
      cloudmonkey update networkserviceprovider state='Enabled' id=${i} | tee -i -a ${DEPLOYLOG};
    done
    NetOffIDSecgrp=`cloudmonkey list networkofferings name="DefaultSharedNetworkOfferingWithSGService" displaytext="Offering for Shared Security group enabled networks" | jq '.networkoffering[] | .id'`;
    WriteOutput "Creating defaultGuestNetwork";
    cloudmonkey create network zoneid=${ZoneID} networkofferingid=${NetOffIDSecgrp} name=defaultGuestNetwork displaytext=defaultGuestNetwork startip="{{ env_guestnetstartip }}" endip="{{ env_guestnetendip }}" gateway="{{ env_guestnetgw }}" netmask="{{ env_guestnetmask }}" physicalnetworkid=${PhysNetGuestID} vlan="{{ env_guestnetvlan }}" | tee -i -a ${DEPLOYLOG};
  else
    WriteOutput "Configuring zone without security groups.";
    WriteOutput "Creating public range.";
    cloudmonkey create vlaniprange zoneid=${ZoneID} vlan="{{ env_pubvlan }}" gateway="{{ env_pubgw }}" netmask="{{ env_pubmask }}" startip="{{ env_pubstartip }}" endip="{{ env_pubendip }}" forvirtualnetwork="true" | tee -i -a ${DEPLOYLOG};
    WriteOutput "Creating Guest VLAN range."
    cloudmonkey update physicalnetwork id=${PhysNetGuestID} vlan="{{ env_podvlans }}" | tee -i -a ${DEPLOYLOG};
  fi
else
  NetProvArrayBasVR=`cloudmonkey list networkserviceproviders name=virtualrouter physicalnetworkid=${PhysNetMgmtID} | jq '.networkserviceprovider[] | .id'`;
  NetProvArrayBasSG=`cloudmonkey list networkserviceproviders name=SecurityGroupProvider physicalnetworkid=${PhysNetMgmtID} | jq '.networkserviceprovider[] | .id'`;
  VRArrayBas=`cloudmonkey list virtualrouterelements nspid=${NetProvArrayBasVR} | jq '.virtualrouterelement[] | .id'`;
  cloudmonkey configure virtualrouterelement enabled='True' id=${VRArrayBas} | tee -i -a ${DEPLOYLOG};
  cloudmonkey update networkserviceprovider id=${NetProvArrayBasVR} state='Enabled' | tee -i -a ${DEPLOYLOG};
  cloudmonkey update networkserviceprovider id=${NetProvArrayBasSG} state='Enabled' | tee -i -a ${DEPLOYLOG};
  if [[ "$SECURITYGROUPENABLED" = "true" ]]; then
    NetOffIDBas=`cloudmonkey list networkofferings name="DefaultSharedNetworkOfferingWithSGService" displaytext="Offering for Shared Security group enabled networks" | jq '.networkoffering[] | .id'`;
  else
    NetOffIDBas=`cloudmonkey list networkofferings name="DefaultSharedNetworkOffering" displaytext="Offering for Shared networks" | jq '.networkoffering[] | .id'`;
  fi
cloudmonkey create network zoneid=${ZoneID} name=defaultGuestNetwork displaytext=defaultGuestNetwork networkofferingid=${NetOffIDBas} | tee -i -a ${DEPLOYLOG};
NETIDBAS=`cloudmonkey list networks | jq '.network[] | select(.name=="defaultGuestNetwork") | .id'`;
fi

WriteOutput "Creating 1st Pod.";
WriteOutput "Adding mgmt for physical hosts"
cloudmonkey create pod zoneid=${ZoneID} name="{{ env_zone_podname }}" gateway="{{ env_podgw }}" netmask="{{ env_podmask }}" startip="{{ env_podstartip }}" endip="{{ env_podendip }}" | tee -i -a ${DEPLOYLOG};

PodID=`cloudmonkey list pods name={{ env_zone_podname }} filter=id | jq '.pod[] | .id'`;
WriteOutput "First Pod created with ID = ${PodID}";

if [ "{{ env_zonetype | lower }}" == "basic" ]; then
  cloudmonkey create vlaniprange podid=${PodID} networkid=${NETIDBAS} gateway="{{ env_guestnetgw }}" netmask="{{ env_guestnetmask }}" startip="{{ env_guestnetstartip }}" endip="{{ env_guestnetendip }}" forvirtualnetwork=false zoneid=${ZoneID} | tee -i -a ${DEPLOYLOG};
fi
NEXTCLUSTER=1
if [ "{{ vmware_ver | lower }}" != "na" ];
then
  {% if env_numversion | version_compare('4.2','>') %}
  WriteOutput "Adding VMware datacenter."
  cloudmonkey add vmwaredc name="{{ vmware_datacenter_name }}" password="{{ vmware_vcsa_pass }}" username="{{ vmware_vcsa_user }}" vcenter="{% if groups['vc_hosts'] | length | int > 0 %}{{ hostvars[groups['vc_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}" zoneid=${ZoneID} | tee -i -a ${DEPLOYLOG};
  {% endif %}
  if [ "{{ env_zone_addhosts }}" == "true" ];
  then
    WriteOutput "Adding VMware cluster."
    {% if env_numversion | version_compare('4.2','>') %}
    cloudmonkey add cluster zoneid=${ZoneID} hypervisor='VMware' clustertype='ExternalManaged' podid=${PodID} url="http://{% if groups['vc_hosts'] | length | int > 0 %}{{ hostvars[groups['vc_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}/{{ vmware_datacenter_name }}/{{ env_zone_clustername }}" clustername="{{ env_zone_clustername }}" vsmipaddress="{% if groups['vc_hosts'] | length | int > 0 %}{{ hostvars[groups['vc_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}" vsmpassword='{{ vmware_vcsa_pass }}' vsmusername='{{ vmware_vcsa_user }}' | tee -i -a ${DEPLOYLOG};
    {% else %}
    cloudmonkey add cluster zoneid=${ZoneID} hypervisor='VMware' clustertype='ExternalManaged' podid=${PodID} url="http://{% if groups['vc_hosts'] | length | int > 0 %}{{ hostvars[groups['vc_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}/{{ vmware_datacenter_name }}/{{ env_zone_clustername }}" clustername="{{ env_zone_clustername }}" password='{{ vmware_vcsa_pass }}' username='{{ vmware_vcsa_user }}' | tee -i -a ${DEPLOYLOG};
    {% endif %}
    ClusterID_VMW=`cloudmonkey list clusters clustername="{{ env_zone_clustername }}" | jq '.cluster[] | .id'`;
    NEXTCLUSTER=$((NEXTCLUSTER+1))
  fi
fi
if  [ "{{ xs_ver | lower }}" != "na" ];
then
  WriteOutput "Adding XenServer cluster.";
  ClusterID_XS=`cloudmonkey add cluster zoneid=${ZoneID} hypervisor='XenServer' clustertype='CloudManaged' podid=${PodID} clustername="p1-c$NEXTCLUSTER"  | jq '.cluster[] | .id'`;
  WriteOutput "Adding XenServer hosts.";
  if [ "{{ env_zone_addhosts }}" == "true" ];
  then
    cloudmonkey add host zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_XS} hypervisor=XenServer password="{{ xs_password }}" username="{{ xs_username }}" url="http://{% if groups['xenserver_hosts'] | length | int > 0 %}{{ hostvars[groups['xenserver_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}" | tee -i -a ${DEPLOYLOG};
    NEXTCLUSTER=$((NEXTCLUSTER+1))
  fi
fi
if  [ "{{ kvm_os | lower }}" != "na" ];
then
  WriteOutput "Adding KVM cluster."
  ClusterID_KVM=`cloudmonkey add cluster zoneid=${ZoneID} hypervisor='KVM' clustertype='CloudManaged' podid=${PodID} clustername="p1-c$NEXTCLUSTER"  | jq '.cluster[] | .id'`;
  if [ "{{ env_zone_addhosts }}" == "true" ];
  then
    WriteOutput "Adding KVM hosts."
    {% for host in groups[ 'kvm_hosts'] %}
    WriteOutput "Adding KVM host {{ host }}.";
    cloudmonkey add host zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_KVM} hypervisor='KVM' password="{{ kvm_password }}" username="{{ kvm_username }}" url="http://{{ hostvars[host]['ansible_ssh_host'] }}" | tee -i -a ${DEPLOYLOG};
    {% endfor %}
  fi
fi

if [ "{{ env_zone_addhosts }}" == "true" ];
then
  HOST_STATES="DOWN"
  while [[ "$HOST_STATES" == "DOWN" ]]; do
    HOST_CHECK=`cloudmonkey list hosts type=routing | grep '"state":' | grep -i 'alert|disconnected|connecting|down'`
    if [[ -z $HOST_CHECK ]];
    then
      HOST_STATES="ALL UP";
    else
      WriteOutput "Not all hosts reported Up. Checking again in 10 seconds.";
      sleep 10;
    fi
  done
WriteOutput "All hosts reported Up. Continuing";
fi

{% if use_shared_storage %}
WriteOutput "Adding Primary Storage pools.";
{% for pool in env_pripools %}
WriteOutput "Adding Primary Storage pool {{ pool }}.";
{% if ('-esxi-pri' in pool) and (env_priprot | lower == "nfs" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_VMW} name='{{ pool }}' scope='cluster' url="{{ env_priprot }}://{% if groups['primary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_pripath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% elif ('-esxi-pri' in pool) and (env_priprot | lower == "iscsi" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_VMW} name='{{ pool }}' scope='cluster' provider='DefaultPrimary' url="vmfs://dummy/{{ vmware_datacenter_name }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% elif ('-xs-pri' in pool) and (env_priprot | lower == "nfs" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_XS} name='{{ pool }}' scope='cluster' url="{{ env_priprot }}://{% if groups['primary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_pripath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% elif ('-xs-pri' in pool) and (env_priprot | lower == "iscsi" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_XS} name='{{ pool }}' scope='cluster' provider='DefaultPrimary' url="{{ env_priprot }}://{% if groups['primary_storage_hosts_iscsi'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts_iscsi'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}/{{ env_iscsi_target }}:{{ env_uuid }}/{{ loop.index0 }}" | tee -i -a ${DEPLOYLOG};
{% elif '-kvm-pri' in pool %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_KVM} name='{{ pool }}' scope='cluster' url="{{ env_priprot }}://{% if groups['primary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_pripath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% endif %}
{% endfor %}
{% endif %}

WriteOutput "Adding Secondary Storage Pool"
{% for pool in env_secpools %}
{% if env_numversion | float > 4.2 %}
cloudmonkey add imagestore name='{{ pool }}' provider='NFS' zoneid=${ZoneID} url="NFS://{% if groups['secondary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['secondary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_secpath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% else %}
cloudmonkey add secondarystorage zoneid=${ZoneID} url="NFS://{% if groups['secondary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['secondary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_secpath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% endif %}
{% endfor %}

WriteOutput "Enabling zone."
cloudmonkey update zone allocationstate='Enabled' id=${ZoneID} | tee -i -a ${DEPLOYLOG};
WriteOutput "You're done. Good luck!";
