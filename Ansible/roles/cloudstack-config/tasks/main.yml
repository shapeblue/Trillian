---

- name: SSL configuration on management (4.11 only)
  include: ./ssljetty.yml
  when: ( ssl_mgmt|bool == true ) and (env_numversion | version_compare('4.11','>='))

- name: Seed secondary storage
  include: ./seedstorage.yml
  when: additional_pod|bool == false

- name: Request and return environment details
  env_db_manage: DBHOST={{ env_db_ip }} DBUSER={{ env_db_user }} DBPASS={{ env_db_password }} DBNAME={{ env_db_name }} ENV_UUID={{ env_uuid }} ENV_NAME={{ env_name_clean }} ENV_ZONETYPE={{ env_zonetype }} ENV_SECGROUPS={{ env_zone_secgroups }} ENV_ACTION=retrieve
  register: env_ranges
  delegate_to: 127.0.0.1
  tags:
    - buildzone
    - create_script

- debug: msg="{{ env_ranges }}"
  tags:
    - buildzone
    - create_script

- name: Copy Cloudmonkey zone create script to mgmt server with SSL certs
  template: src="deployzone.sh.j2" dest="/tmp/deployzone.sh" mode=0744
  vars:
      sslrootcert: "{{ lookup( 'file', '{{ ssl_rootcert }}') }}"
      sslsitecert: "{{ lookup( 'file', '{{ ssl_cert }}') }}"
      sslkey: "{{ lookup( 'file', '{{ ssl_key }}') }}"
  tags:
    - buildzone
    - create_script
  when: ( additional_pod|bool == false ) and ( ssl_systemvm|bool == true )

- name: Copy Cloudmonkey zone create script to mgmt server without SSL certs
  template: src="deployzone.sh.j2" dest="/tmp/deployzone.sh" mode=0744
  vars:
      sslrootcert: "noSSLconfigured"
      sslsitecert: "noSSLconfigured"
      sslkey: "noSSLconfigured"
  tags:
    - buildzone
    - create_script
  when: ( additional_pod|bool == false ) and ( ssl_systemvm|bool == false )

- name: Copy Cloudmonkey pod addition script to mgmt server
  template: src="addpod.sh.j2" dest="/tmp/addpod-{{ env_name_clean }}.sh" mode=0744
  tags:
    - buildzone
    - create_script
  when: additional_pod

- name: "wait for ACS Management Service to come up"
  shell: "curl http://127.0.0.1:8080/client/api --connect-timeout 5"
  register: result
  until: result.stdout.find("unable to verify user") != -1
  retries: 36
  tags:
    - buildzone

- name: preset some global settings
  acs_mysql_update: DBHOST="{{ mysql_master_ip }}" DBUSER="cloud" DBPASS={{ mysql_cloud_password }} MYSQL_STATEMENT="UPDATE cloud.configuration SET value='{{ item.value }}' WHERE name='{{ item.name }}';"
  with_items:
  - "{{ global_settings.addpod }}"
  when: additional_pod
  tags:
    - "global_settings"

- name: Print to screen deployzone file
  command: "/bin/cat /tmp/deployzone.sh"
  register: builddetails
  tags:
    - buildzone
  when: additional_pod|bool == false

- name: Print to screen deployzone file
  command: "/bin/cat /tmp/addpod-{{ env_name_clean }}.sh"
  register: builddetails
  tags:
    - buildzone
  when: additional_pod

- debug: msg="{{ builddetails.stdout | quote }}"
  tags:
    - buildzone

- debug:
    msg: "{{ hostvars[groups['kvm_hosts'][0]]['ansible_ssh_host'] }}"

#- name: wait for Ubuntu KVM hosts to be alive
#  shell: "ping {{ hostvars[groups['kvm_hosts'][0]]['ansible_distribution'] }} -c 1"
#  register: pong
#  until: pong.rc == 0
#  retries: "{{ ssh_retries }}"
#  with_items:
#    - groups['kvm_hosts']
#  when: hostvars[groups['kvm_hosts'][0]]['ansible_distribution'] == 'Ubuntu'
#  tags:
#    - kvm
#    - buildzone

- name: Configure Zone (Run Cloudmonkey Zone create script)
  shell: /tmp/deployzone.sh
  when: (create_zone|bool == True) and (additional_pod|bool == false)
  tags:
    - buildzone

- name: Add pod (Run Cloudmonkey add pod script)
  shell: /tmp/addpod-{{ env_name_clean }}.sh
  when: additional_pod
  tags:
    - buildzone

- name: Print to screen zone deployment log
  command: "/bin/cat /tmp/{{ env_name_clean }}-deployzone.log"
  register: logdetails
  tags:
    - buildzone
  when: (additional_pod|bool == false) and (create_zone|bool == True)

- name: Print to screen pod addition log
  command: "/bin/cat /tmp/addpod-{{ env_name_clean }}.log"
  register: logdetails
  tags:
    - buildzone
  when: additional_pod

- debug: msg="{{ logdetails.stdout | quote }}"
  tags:
    - buildzone
