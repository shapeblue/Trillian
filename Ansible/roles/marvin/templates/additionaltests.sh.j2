#!/bin/bash

#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

set +e # stop erroneous failures reported by Jenkins

LOGDIR=/marvin/MarvinLogs/AdditionalTests

mkdir -p $LOGDIR

rm -f /marvin/tests/smoke/*.pyc
rm -f /marvin/tests/component/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/config/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/lib/*pyc

cleanup() {
    cloudmonkey set asyncblock false
    cloudmonkey set display default
    # TODO: destroy accounts, domains, templates
    # Destroy vms
    for vmid in $(cloudmonkey list virtualmachines listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey destroy virtualmachine id=$vmid expunge=true || true
    done
    # Destroy routers
    for rid in $(cloudmonkey list routers listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey destroy router id=$rid || true
    done
    # Destroy networks
    for netid in $(cloudmonkey list networks listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey delete network id=$netid || true
    done
    # Destroy vpcs
    for vid in $(cloudmonkey list vpcs listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey delete vpc id=$vid || true
    done
    # Destroy alerts
    for id in $(cloudmonkey list alerts listall=true keyword=auth-error filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey delete alerts ids=$id || true
    done
}

runtest() {
    file=$1
    rm -fr $LOGDIR/$(basename $file).xml
    TRIMFILE=$file | sed 's/.py$//g'
    OLDRESULT= ll $LOGDIR | grep -Ew '\<$TRIMFILE_[a-zA-Z0-9]{6}\>'
    rm -fr $OLDRESULT    
    nosetests --with-xunit --xunit-file=$LOGDIR/$(basename $file).xml --with-marvin --marvin-config=/marvin/{{ env_name_clean }}-advanced-cfg --hypervisor={{ env_hv }} -a tags=advanced $file
    cleanup || true
}

TESTS="$*"
NUMTESTS=`echo $* | wc -w`
counter=1
PASSES=0
for testfile in $TESTS; do
    file="/marvin/tests/$testfile"
    if [ ! -f $file ]; then
        echo "Provided additional test file $file not found, skipping."
        continue
    fi
    echo -e "\e[92m ---->  Starting $(basename $file) on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: {{ env_name_clean }}\e[0m"
  {% if use_hipchat %}hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "Starting <b>$(basename $file)</b> on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: <br><b>{{ env_name_clean }}</b> - test ($counter of $NUMTESTS)"{% endif %}

    runtest $file

    LASTUPDATEDIR=`ls $LOGDIR/*/ -td | head -n 1`
    if [[ -s ${LASTUPDATEDIR}failed_plus_exceptions.txt ]]; then
      echo "test $(basename $file) in {{ env_name_clean }} looks to have errors"
      {% if use_hipchat %}hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $(basename $file) in {{ env_name_clean }} looks to have <span style="color:#FF0000">errors</span>. $PASSES of $counter good so far"{% endif %}

    else
      PASSES=$((PASSES+1))
      echo "test $(basename $file) in {{ env_name_clean }} looks OK"
      {% if use_hipchat %}hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $(basename $file) in {{ env_name_clean }} looks <span style="color:#2F962F">OK</span>. $PASSES of $counter good so far."{% endif %}

    fi
    counter=$((counter+1))

done

GOOD=0
BAD=0
for file in $LOGDIR/*.xml; do
  if grep --q 'errors="0" failures="0"' ${file}
    then
      GOOD=$((GOOD+1))
    else
      BAD=$((BAD+1))
  fi
done
echo "Test completed. $GOOD look ok, $BAD have errors"
{% if use_hipchat %}hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --message "Smoketests for <b>{{ env_name_clean }}</b> completed. <br><b>$GOOD</b> look ok, <b>$BAD</b> have errors" --colour "green" --notify{% endif %}

echo "" >> /marvin/smoketests-summary.txt
echo "Additional tests completed. $GOOD look ok, $BAD have error(s)" >> /marvin/smoketests-summary.txt
echo "" >> /marvin/smoketests-summary.txt
python /marvin/tools/xunit-reader.py $LOGDIR/ >> /marvin/smoketests-summary.txt
cat /marvin/smoketests-summary.txt
