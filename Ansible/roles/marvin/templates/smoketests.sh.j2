#!/bin/bash
#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

set +e # stop erroneous failures reported by Jenkins

TESTTYPE="Smoke tests"
LOGDIR=/marvin/MarvinLogs
TESTDIR="/marvin/tests/smoke"
SUMMARY_FILE=/marvin/smoketests-summary.txt
TMP_JSON_DIR="/marvin/json_results/"
CLEAN_UP_LOG="/marvin/cleanup.log"
mkdir -p $LOGDIR
echo "$(date --iso-8601=minutes)" > /marvin/testrunstartdate
export SLACK_CLI_TOKEN="{{ slack_token }}"
if [ -e /marvin/joburl ]; then
  jenkinslink="`cat /marvin/jenkins_build_url`console/"
else
  jenkinslink=""
fi

## prefer python 3 versions of these:
PYTHON=`which python3 || which python`
NOSETESTS=/usr/local/bin/nosetests
if [ ! -x ${NOSETESTS} ]
then
  NOSETESTS=/usr/bin/nosetests
fi

STUCKTEMPLATES=0
STUCKVMS=0
STUCKNETWORKS=0
STUCKVPCS=0
STUCKVOLS=0
sleepduration=10
retries=12

. /marvin/common_functions.sh

remove_old_files
record_existing_entities

NUMTESTS=`find $TESTDIR -name test_*.py | wc -l`
run_start_time="$(date -u +%s)"
counter=1
GOOD=0
BAD=0
SKIPPED=0
SKIPPED_TESTS=""
# FIXME: make separate list of `dangerous` tests and those that may be run in parallel
FILES=$(find $TESTDIR/ -name "test_*py" | grep -v test_host_maintenance | grep -v test_hostha_kvm)
if [ -f /$TESTDIR/test_host_maintenance.py ]; then
    FILES="$FILES $TESTDIR/test_host_maintenance.py"
fi
if [ -f $TESTDIR/test_hostha_kvm.py ]; then
    FILES="$FILES $TESTDIR/test_hostha_kvm.py"
fi
for file in $FILES; do
  TESTFILENAME="$(basename $file)"
  echo -e "\e[92m ---->  Starting $TESTFILENAME on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: {{ env_name_clean }}\e[0m"
  {% if use_hipchat %}
    hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "Starting <b>$(basename $file)</b> on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: <br><b>{{ env_name_clean }}</b> - test ($counter of $NUMTESTS)"
  {% endif %}
  {% if use_slack %}    slackmsg "Starting $TESTFILENAME on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }}.\nTest ($counter of $NUMTESTS) " "#808080"
  {% endif %}
  start_time="$(date -u +%s)"
  launchtest $file
  end_time="$(date -u +%s)"
  elapsed="$(($end_time-$start_time))"
  all_tests_elapsed="$((($end_time-$run_start_time)/1440))"
  tests_left="$(($NUMTESTS-$counter))"
  echo "$(basename $file): $elapsed seconds" >> $LOGDIR/tests-time.txt

  TESTRESULTXML=${LOGDIR}/${TESTFILENAME}.xml
  if [[ -s ${TESTRESULTXML} ]]; then
    if grep --q 'errors="0" failures="0"' ${TESTRESULTXML}; then
      GOOD=$((GOOD+1))
      echo "test $TESTFILENAME in {{ env_name_clean }} looks OK"
      {% if use_hipchat %}
        hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $TESTFILENAME in {{ env_name_clean }} looks <span style="color:#2F962F">OK</span>. $GOOD of $counter good so far.<br>Tests have taken $all_tests_elapsed hours so far. $tests_left tests to go."
      {% endif %}
      {% if use_slack %}
        slackmsg "Test $TESTFILENAME looks *OK*.\n$GOOD of $counter good so far.\nTests have taken $all_tests_elapsed hours so far. $tests_left tests to go." "good"
      {% endif %}
    else
      BAD=$((BAD+1))
      echo "test $(basename $file) in {{ env_name_clean }} looks to have errors"
      {% if use_hipchat %}
        hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $TESTFILENAME in {{ env_name_clean }} looks to have <span style="color:#FF0000">errors</span>. $GOOD of $counter good so far.<br>Tests have taken $all_tests_elapsed hours so far. $tests_left tests to go."
      {% endif %}
      {% if use_slack %}
        slackmsg "Test $TESTFILENAME looks to have *errors*.\n$GOOD of $counter good so far.\nTests have taken $all_tests_elapsed hours so far. $tests_left tests to go." "warning"
      {% endif %}
    fi
  else
    echo "test $TESTFILENAME in {{ env_name_clean }} did not run"
    SKIPPED_TESTS="$SKIPPED_TESTS `echo $TESTFILENAME | sed 's/.py$//g'`"
    SKIPPED=$((SKIPPED+1))
  fi
  counter=$((counter+1))
done

# Cleanup tmp files
rm -f .skipdeletingaccounts
rm -f .skipdeletingdomains
rm -f .skipdeleteofferings
rm -f .skipdeletediskofferings

echo "$TESTTYPE completed. $GOOD look ok, $BAD have errors, $SKIPPED did not run"
{% if use_hipchat %}
  hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --message "$TESTTYPE for <b>{{ env_name_clean }}</b> completed. <br><b>$GOOD</b> look ok, <b>$BAD</b> have errors, <b>$SKIPPED</b> did not run" --colour "green" --notify
{% endif %}
{% if use_slack %}
  slackmsg "$TESTTYPE completed.\n*$GOOD* look ok, *$BAD* have errors, *$SKIPPED* did not run" "good"
{% endif %}

echo "$TESTTYPE completed. $GOOD look OK, $BAD have errors, $SKIPPED did not run" > $SUMMARY_FILE
echo "Only failed and skipped tests results shown below:" >> $SUMMARY_FILE
echo "" >> $SUMMARY_FILE
${PYTHON} /marvin/tools/xunit-reader.py $LOGDIR/ >> $SUMMARY_FILE
for test in $SKIPPED_TESTS; do
  echo "all_$test | \`Skipped\` | --- | $test.py"  >> $SUMMARY_FILE
done
echo "" >> $SUMMARY_FILE
cat $SUMMARY_FILE

echo "processing json output"
bash /marvin/process_json_results.sh
