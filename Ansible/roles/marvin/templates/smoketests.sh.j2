#!/bin/bash
#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

set +e # stop erroneous failures reported by Jenkins

TESTTYPE="Smoke tests"
LOGDIR=/marvin/MarvinLogs
TESTDIR="/marvin/tests/smoke"
TMP_JSON_DIR="/marvin/json_results/"
CLEAN_UP_LOG="$LOGDIR/cleanup.log"
mkdir -p $LOGDIR
echo "$(date --iso-8601=minutes)" > /marvin/testrunstartdate
export SLACK_CLI_TOKEN="{{ slack_token }}"
if [ -e /marvin/joburl ]; then
  jenkinslink="`cat /marvin/jenkins_build_url`console/"
else
  jenkinslink=""
fi

STUCKTEMPLATES=0
STUCKVMS=0
STUCKNETORKS=0
STUCKVPCS=0
STUCKVOLS=0
sleepduration=10
retries=12

rm -f /marvin/smoketests-summary.txt
rm -f $TESTDIR/test_*.pyc
rm -f /usr/lib/python2.7/site-packages/marvin/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/config/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/lib/*pyc

cleanup() {
  # dont wait for async job - execute in parallel until told otherwise
  cloudmonkey set asyncblock false
  cloudmonkey set output json
  # TODO: N/A

  echo "Destroy alerts"
  for id in $(cmk list alerts listall=true keyword=vm | jq -r '.alert[] .id'); do
    cloudmonkey delete alerts ids=$id || true
  done

  echo "Destroy templates, forced, since some VMs might exist."
  GCTEMPLATES=`cmk list templates templatefilter=self listall=true`
  NUM_GCTEMPLATES=`echo $GCTEMPLATES | jq -r '.count'`
  if [ $NUM_GCTEMPLATES -gt $STUCKTEMPLATES ]; then
    echo "Test file $file left behind $NUM_GCTEMPLATES templates" >> $CLEAN_UP_LOG
    for templateid in $(echo $GCTEMPLATES | jq -r '.template[] .id'); do
      cmk delete template id=$templateid forced=true  || true
    done
    sleep $((sleepduration)*2)
    STUCKTEMPLATES=`cmk list templates templatefilter=self | jq -r '.count'`
  fi

  echo "Destroy vms, all in parallel"
  NUM_GCVMS=`cmk list virtualmachines listall=true $GCVMS | jq -r '.count'`
  if [ $NUM_GCVMS -gt $STUCKVMS ]; then
    echo "Test file $file left behind $NUM_GCVMS VMs" >> $CLEAN_UP_LOG
    for vmid in $(cmk list virtualmachines listall=true $GCVMS | jq -r '.virtualmachine[].id'); do
      cmk destroy virtualmachine id=$vmid expunge=true || true
    done
    echo "wait ${sleepduration}s to give VMs some time to be destroyed"
    sleep $sleepduration
  fi

  tries=$retries
  while [ $tries -gt 0 ]     
  do 
    NUM_GCVMS=`cmk list virtualmachines listall=true| jq -r '.count'`
    if [ $NUM_GCVMS -gt $STUCKVMS ]; then
      echo "Still $NUM_GCVMS left. waiting.."
      sleep $sleepduration
      tries=$((tries)-1)
      if [ retries -eq 0 ]; then STUCKVMS=$NUM_GCVMS; fi
    else
      tries=0
    fi
  done

  tries=$retries
  echo "deleting networks"
  GCNETWORKS=$(cmk list networks listall=true | jq -r '.network[] .id')
  NUM_GCNETWORKS=`echo $GCNETWORKS | jq '.count'`
  if [ $NUM_GCNETWORKS -gt $STUCKNETWORKS ]; then
    echo "Test file $file left behind $NUM_GCNETWORKS Networks" >> $CLEAN_UP_LOG    
    while [ $tries -gt 0 ]     
    do 
      for netid in $(cmk list networks listall=true | jq -r '.network[] .id'); do
        cmk delete network id=$netid || true
      done
    echo "wait ${sleepduration}s to give Networks some time to destroy"
    sleep $sleepduration
    NUM_GCNETWORKS=`cmk networks listall=true filter=id | jq -r '.count'`
    if [ $NUM_GCNETWORKS -gt $STUCKVMS ]; then
      tries=$((retries)-1)
      if [ retries -eq 0 ]; then STUCKNETWORKS=$NUM_GCNETWORKS; fi
    else
      tries=0
    fi
    done
  fi

  echo "deleting VPCs"
  NUM_GCVPCS=`cmk list vpcs listall=true | jq -r '.vpc | length'`
  if [ $NUM_GCVPC -gt $STUCKVPCS ]; then
    echo "$file left $((NUM_GCVPCS)-(STUCKVPCS)) behind"
    for vid in $(cmk list vpcs listall=true | jq -r '.vpc[] .id'); do
      cmk delete vpc id=$vid || true
    done
    sleep $sleepduration
    NUM_GCVPCS=`cmk list vpcs listall=true | jq -r '.count'`
    if [ $NUM_GCVPCS -gt $STUCKVPCS ]; then
      tries=$((retries)-1)
      if [ retries -eq 0 ]; then
        STUCKVPCS=$NUM_GCVPCS
      else
        sleep $sleepduration
      fi
    else
      tries=0
    fi
    done
  fi

  # move to blocking async calls (just volume deletion, should be very fast), so later we can delete accounts and domains
  cloudmonkey set asyncblock true

  # Destroy data volumes when zero attached (all VMs deleted)
  NUM_GCVOLS=$(cmk list volumes type=data | jq -r '.count')
  if [ $NUM_GCVOLS -gt $STUCKVOLS ]; then
    echo "$file left $((NUM_GCVOLS-(STUCKVOLS)) behind"
    for volumeid in $(cmk list volumes listall=true type=data | jq -r '.volume[] .id'); do
      cmk delete volume id=$volumeid || true
    done
  fi
  sleep $sleepduration
  NUM_GCVOLS=`cmk list volumes listall=true type=data | jq -r '.count'`
  if [ $NUM_GCVOLS -gt $STUCKVOLS ]; then
    tries=$((retries)-1)
    if [ retries -eq 0 ]; then
      STUCKVOLS=$NUM_GCVOLS
    else
      sleep $sleepduration
    fi
  else
    tries=0
  fi
  done
  fi

  # Destroy accounts (keep some, delete all others)
  cmk list accounts listall=true name="baremetal-system-account" | jq -r '.account[] .id'  > .skipdeletingaccounts
  cmk list accounts listall=true name="ACSuser" | jq -r '.account[] .id'  >> .skipdeletingaccounts
  cmk list accounts listall=true name="admin" | jq -r '.account[] .id'  >> .skipdeletingaccounts
  cmk list accounts listall=true | jq -r '.account[] .id'  > .deleteaccounts
  for accountid in $(comm -13 <(sort -u .skipdeletingaccounts) <(sort -u .deleteaccounts)); do
    cmk delete account id=$accountid || true
  done

  # Destroy domains (keep ROOT domain, delete all other)
  cmk list domains listall=true name=ROOT | jq -r '.domain[] .id' > .skipdeletingdomains
  cmk list domains listall=true | jq -r '.domain[] .id' > .deletedomains
  for domainid in $(comm -13 <(sort -u .skipdeletingdomains) <(sort -u .deletedomains)); do
    cmk delete domain id=$domainid || true
  done
  
  cmk list serviceofferings listall=true issystem=false name='medium instance' | jq -r '.serviceoffering[].id' > .skipdeleteofferings
  cmk list serviceofferings listall=true issystem=false name='small instance' | jq -r '.serviceoffering[].id' >> .skipdeleteofferings
  cmk list serviceofferings listall=true issystem=false | jq -r '.serviceoffering[].id' > .deleteofferings
  for offeringid in $(comm -13 <(sort -u .skipdeletdeleteofferings) <(sort -u .deleteofferings)); do
    cmk delete serviceofferings id=$offeringid || true
  done

  cmk list diskofferings listall=true issystem=false name='small' | jq -r '.diskoffering[].id' > .skipdeletediskofferings
  cmk list diskofferings listall=true issystem=false name='medium' | jq -r '.diskoffering[].id' >> .skipdeletediskofferings
  cmk list diskofferings listall=true issystem=false name='large' | jq -r '.diskoffering[].id' >> .skipdeletediskofferings
  cmk list diskofferings listall=true issystem=false name='custom' | jq -r '.diskoffering[].id' >> .skipdeletediskofferings
  cmk list diskofferings listall=true issystem=false | jq -r '.diskoffering[].id' > .deletediskofferings
  for offeringid in $(comm -13 <(sort -u .skipdeletediskofferings) <(sort -u .deletediskofferings)); do
    cmk delete diskofferings id=$offeringid || true
  done



# cleanup
rm -f .skipdeletingaccounts
rm -f .deleteaccounts
rm -f .skipdeletingdomain
rm -f .deletedomain
rm -f .skipdeleteofferings
rm -f .deleteofferings
rm -f .skipdeletediskofferings
rm -f .deletediskofferings
}

runtest() {
  file=$1
  rm -fr $LOGDIR/$(basename $file).xml
  TRIMFILE=$(echo $(basename $file) | sed 's/.py$//g')
  OLDRESULT=$(ls $LOGDIR | grep -E $TRIMFILE'_[a-zA-Z0-9]{6}$' | head -1)
  if [ ! -z "${OLDRESULT// }" ]; then
    echo "Found old test results, removing:" $LOGDIR/$OLDRESULT
    rm -fr $LOGDIR/$OLDRESULT
  fi
  nosetests --with-xunit --xunit-file=$LOGDIR/$(basename $file).xml --with-json --json-file=$LOGDIR/$(basename $file).json --with-marvin --marvin-config=/marvin/{{ env_name_clean }}-advanced-cfg --hypervisor={{ env_hv }} -s -a tags={{ env_zonetype | lower }}{% if marvin_test_categories is defined %}{% for category in marvin_test_categories %},{{ category }}{% endfor %}{% endif %} $file
  cleanup || true
}

launchtest() {
  file=$1
  runtest $file
  # Run tests once again on error or failure
  python /marvin/tools/xunit-reader.py $LOGDIR/$(basename $file).xml | grep -e Failure -e Error && cleanup && runtest $file && echo "Intermittent failure detected: $file" >> /marvin/smoketests-summary.txt
}
slackmsg() {
   messagebody=$1
   messagecolor=$2
   slack chat send \
  --channel "#testing" \
  --color $messagecolor \
  --text "$messagebody" \
  --title "$TESTTYPE update for {{ env_name_clean }}" \
  --title-link "$jenkinslink"
}

NUMTESTS=`find $TESTDIR/test_*.py | wc -l`
run_start_time="$(date -u +%s)"
counter=1
PASSES=0
# FIXME: make separate list of `dangerous` tests and those that may be run in parallel
FILES=$(ls $TESTDIR/test_*py | grep -v test_host_maintenance | grep -v test_hostha_kvm)
if [ -f /$TESTDIR/test_host_maintenance.py ]; then
    FILES="$FILES $TESTDIR/test_host_maintenance.py"
fi
if [ -f $TESTDIR/test_hostha_kvm.py ]; then
    FILES="$FILES $TESTDIR/test_hostha_kvm.py"
fi
for file in $FILES; do
  TESTFILENAME="$(basename $file)"
  echo -e "\e[92m ---->  Starting $TESTFILENAME on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: {{ env_name_clean }}\e[0m"
  {% if use_hipchat %}    hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "Starting <b>$(basename $file)</b> on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: <br><b>{{ env_name_clean }}</b> - test ($counter of $NUMTESTS)"
  {% endif %}
  {% if use_slack %}    slackmsg "Starting $TESTFILENAME on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }}.\nTest ($counter of $NUMTESTS) " "#808080"
  {% endif %}
  start_time="$(date -u +%s)"
  launchtest $file
  end_time="$(date -u +%s)"
  elapsed="$(($end_time-$start_time))"
  all_tests_elapsed="$((($end_time-$run_start_time)/1440))"
  tests_left="$(($NUMTESTS-$counter))"
  echo "$(basename $file): $elapsed seconds" >> $LOGDIR/tests-time.txt

  LASTUPDATEDIR=`ls $LOGDIR/*/ -td | head -n 1`
  if [[ -s ${LASTUPDATEDIR}failed_plus_exceptions.txt ]]; then
    echo "test $(basename $file) in {{ env_name_clean }} looks to have errors"
    {% if use_hipchat %}      hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $TESTFILENAME in {{ env_name_clean }} looks to have <span style="color:#FF0000">errors</span>. $PASSES of $counter good so far.<br>Tests have taken $all_tests_elapsed hours so far. $tests_left tests to go."
{% endif %}
    {% if use_slack %}      slackmsg "Test $TESTFILENAME looks to have *errors*.\n$PASSES of $counter good so far.\nTests have taken $all_tests_elapsed hours so far. $tests_left tests to go." "warning"
{% endif %}
  else
    PASSES=$((PASSES+1))
    echo "test $TESTFILENAME in {{ env_name_clean }} looks OK"
    {% if use_hipchat %}       hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $TESTFILENAME in {{ env_name_clean }} looks <span style="color:#2F962F">OK</span>. $PASSES of $counter good so far.<br>Tests have taken $all_tests_elapsed hours so far. $tests_left tests to go."
{% endif %}
  {% if use_slack %}      slackmsg "Test $TESTFILENAME looks *OK*.\n$PASSES of $counter good so far.\nTests have taken $all_tests_elapsed hours so far. $tests_left tests to go." "good"
{% endif %}
  fi
  counter=$((counter+1))

done

GOOD=0
BAD=0
for file in $LOGDIR/*.xml; do
  if grep --q 'errors="0" failures="0"' ${file}
    then
      GOOD=$((GOOD+1))
    else
      BAD=$((BAD+1))
  fi
done
echo "Test completed. $GOOD look ok, $BAD have errors"
{% if use_hipchat %}hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --message "$$TESTTYPE for <b>{{ env_name_clean }}</b> completed. <br><b>$GOOD</b> look ok, <b>$BAD</b> have errors" --colour "green" --notify
{% endif %}
{% if use_slack %}slackmsg "$TESTTYPE completed.\n*$GOOD* looks ok, *$BAD* have errors" "good"
{% endif %}

echo "Smoke tests completed. $GOOD look OK, $BAD have error(s)" >> /marvin/smoketests-summary.txt
echo "$GOOD look ok, $BAD have errors" > /marvin/test-summary.txt
echo "Only failed tests results shown below:" >> /marvin/smoketests-summary.txt
echo "" >> /marvin/smoketests-summary.txt
python /marvin/tools/xunit-reader.py $LOGDIR/ >> /marvin/smoketests-summary.txt
cat /marvin/smoketests-summary.txt

bash /marvin/process_json_results.sh
