---

# prechecks for required vars
- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Check that mgmt server baseurl is defined
      fail:
        msg: "upgrade_baseurl_mgmt is required"
      when: upgrade_baseurl_mgmt is undefined and upgrade_rooturl is undefined
    
    - name: Check that kvm baseurl is defined if kvm hosts exist
      fail: msg="upgrade_baseurl_kvm is required as there are KVM hosts present"
      when: upgrade_baseurl_kvm is undefined and ( groups['kvm_hosts']|length > 0 ) and upgrade_rooturl is undefined
    
    - name: Check upgrade version is specified
      fail: msg="upgrade version is required"
      when: upgrade_cloudstack_ver is undefined

    - name: decode version string
      cs_version_facts:
        versionstring: "{{ upgrade_cloudstack_ver }}"
        isupgrade: true
      register: cs_upgrade_data
      
    - debug: msg="{{ cs_upgrade_data }}"
      
    - set_fact:
        skip_template: false
      when: skip_template is undefined
    
# Perform upgrade
    - debug:
        msg: "Upgrade System VMs to {{ upgrade_version }}"

    - local_action:
        module: cs_template
        name: "{{ def_system_templates[upgrade_version].vmware_systemvm_name }}"
        url: "{{ def_system_templates[upgrade_version].vmware_url }}"
        hypervisor: VMware
        format: OVA
        cross_zones: yes
        os_type: "Other Linux (64-bit)"
        api_key: "{{ cm_apikey }}"
        api_secret: "{{ cm_secretkey }}"
        api_timeout: 120
        api_url: "http://{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}:8080/client/api"
      when: vmware_ver|lower != "na" and skip_template|bool != "true"
      tags:
        - systemvms
   
    - local_action:
        module: cs_template
        name: "{{ def_system_templates[upgrade_version].xs_systemvm_name }}"
        url: "{{ def_system_templates[upgrade_version].xs_url }}"
        hypervisor: XenServer
        format: VHD
        cross_zones: yes
        os_type: Debian GNU/Linux 5.0 (64-bit)
        api_key: "{{ cm_apikey }}"
        api_secret: "{{ cm_secretkey }}"
        api_timeout: 120
        api_url: "http://{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}:8080/client/api"
      when: xs_ver|lower != "na" and skip_template|bool != "true"
      tags:
        - systemvms



    - local_action:
        module: cs_template
        name: "{{ def_system_templates[upgrade_version].kvm_systemvm_name }}"
        url: "{{ def_system_templates[upgrade_version].kvm_url }}"
        hypervisor: KVM
        format: QCOW2
        cross_zones: yes
        os_type: Debian GNU/Linux 5.0 (64-bit)
        api_key: "{{ cm_apikey }}"
        api_secret: "{{ cm_secretkey }}"
        api_timeout: 120
        api_url: "http://{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}:8080/client/api"
      when:  kvm_os|lower != "na" and skip_template|bool != "true"
      tags:
        - systemvms

- hosts: cloudstack_manager_hosts
  gather_facts: no
  tasks:

    - name: decode verion string
      cs_version_facts:
        versionstring: "{{ upgrade_cloudstack_ver }}"
        isupgrade: true
      register: cs_upgrade_data

    - name: reset CloudMonkey base configuration
      shell: "cloudmonkey set prompt 'SBCM5>' && cloudmonkey set history_file /usr/share/cloudmonkey_history && cloudmonkey set log_file /var/log/cloudmonkey && cloudmonkey set log_file /var/log/cloud-cli.log && cloudmonkey set display json && cloudmonkey set apikey {{ cm_apikey }} && cloudmonkey set secretkey {{ cm_secretkey }} && cloudmonkey set url http://{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}:8080/client/api && cloudmonkey set display json && export TERM=vt100"

    - set_fact:
        skip_template: false
      when: skip_template is undefined

    - set_fact:
        upgrade_baseurl_mgmt: "{{ upgrade_rooturl }}{{ baseurl_mgmt_suffix }}{{ upgrade_repo_version_var }}/"
      when: upgrade_baseurl_mgmt is undefined

    - name: Wait for new system VM template to be ready before returning
      shell: "cloudmonkey list templates listall=true templatefilter=all name='{{ def_system_templates[upgrade_version].kvm_systemvm_name }}' | jq '.template[].isready' | sort | uniq"
      register: result
      until: result.stdout == "true"
      retries: 400
      when:  kvm_os|lower != "na" and skip_template|bool != "true"
      tags:
        - waitfortemplate
        - systemvms

    - name: Wait for new system VM template to be ready before returning
      shell: "cloudmonkey list templates listall=true templatefilter=all name='{{ def_system_templates[upgrade_version].xs_systemvm_name }}' | jq '.template[].isready' | sort | uniq"
      register: result
      until: result.stdout == "true"
      retries: 400
      when: xs_ver|lower != "na" and skip_template|bool != "true"
      tags:
        - waitfortemplate
        - systemvms

    - name: Wait for new system VM template to be ready before returning
      shell: "cloudmonkey list templates listall=true templatefilter=all name='{{ def_system_templates[upgrade_version].vmware_systemvm_name }}' | jq '.template[].isready' | sort | uniq"
      register: result
      until: result.stdout == "true"
      retries: 400
      when: vmware_ver|lower != "na" and skip_template|bool != "true"
      tags:
        - waitfortemplate
        - systemvms

    - name: Upgrade CloudStack Mgmt Server
      include: roles/cloudstack-manager/tasks/upgrade_mgmt.yaml


- hosts: kvm_hosts
  gather_facts: no
  tasks:
    - set_fact:
        upgrade_baseurl_kvm: "{{ upgrade_rooturl }}{{ baseurl_kvm_suffix }}{{ upgrade_repo_version_var }}/"
      when: upgrade_baseurl_kvm is undefined

    - name: Upgrade KVM hosts
      include: roles/kvm/tasks/upgrade_kvm.yaml
      when: groups['kvm_hosts']|length > 0


- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: update project - tag Upgrading_System_VMs
      include: tasks/updateproject.yml project_tag=Waiting_for_System_VMs
      when: wait_till_setup

- hosts: cloudstack_manager_hosts
  gather_facts: no
  tasks:

  - name: Test for API on 8080 on primary management host before configuring secondary
    shell: "curl http://127.0.0.1:8080/client/api --connect-timeout 5"
    register: result
    until: result.stdout.find("unable to verify user") != -1
    retries: 100
    run_once: true

  - name: determine number of db hosts
    set_fact: num_db_hosts="{{ groups['mysql_hosts'] | length }}"
  
  - name: set mysql_master_ip
    set_fact: mysql_master_ip={{ (num_db_hosts | int == 0) | ternary("{{ hostvars[groups['primary_cs_manager'][0]]['ansible_ssh_host'] }}","{{ hostvars[groups['mysql_master_host'][0]]['ansible_ssh_host'] }}") }}
  
  - name: upgrade SSVM and CPVM
    shell: cloudstack-sysvmadm -d {{ mysql_master_ip }} -u cloud -p {{ mysql_cloud_password }} -a -t 3
    run_once: true


- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: update project - tag Waiting_for_Upgraded_System_VMs
      include: tasks/updateproject.yml project_tag=Waiting_for_System_VMs
      when: wait_till_setup

- hosts: primary_cs_manager
  tasks:
    - include: ./roles/cloudstack-manager/tasks/wait-for-environment.yml
      when: wait_till_setup

- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: update project - tag Upgraded_System_VMs_up
      include: tasks/updateproject.yml project_tag=System_VMs_up
      when: wait_till_setup

