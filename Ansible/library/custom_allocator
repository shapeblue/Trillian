#!/bin/bash
##############################################################
#
#Returns host
#####################################################################################
# Vars
#


ARGS="(`cat $1`)"

ALGORITHM=`echo $ARGS | tr " " "\n"| awk -F= '$1=="algorithm"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
CLUSTERID=`echo $ARGS | tr " " "\n"| awk -F= '$1=="clusterid"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
PODID=`echo $ARGS | tr " " "\n"| awk -F= '$1=="podid"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'` ## FOR LATER
METRIC=`echo $ARGS | tr " " "\n"| awk -F= '$1=="metric"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'` ## FOR LATER
ZONEID=`echo $ARGS | tr " " "\n"| awk -F= '$1=="zoneid"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'` ## FOR LATER

function least_cluster_cpu()
{
  LOWESTCLUSTERID=`cmk list clustersmetrics filter=id,cpuused,state | jq '.cluster | map(select(.state=="Enabled"))' | sed 's/%//g' | jq 'sort_by(.cpuused)' | jq -r '.[0].id'`
  LOWESTCLUSTERNAME=`cmk list clusters id=$LOWESTCLUSTERID | jq -r '.cluster[] | .name'`
}

function least_cluster_mem()
{
  LOWESTCLUSTERID=`cmk list clustersmetrics filter=id,memoryused,state | jq '.cluster | map(select(.state=="Enabled"))' | sed 's/%//g' | jq 'sort_by(.memoryused)' | jq -r '.[0].id'`
  LOWESTCLUSTERNAME=`cmk list clusters id=$LOWESTCLUSTERID | jq -r '.cluster[] | .name'`
}

function least_host_cpu()
{
  HOSTUSE=`cmk list hosts type=routing state=Up resourcestate=Enabled | jq '.host[]' | sed 's/\%//'`
  LOWESTHOSTID=`echo $HOSTUSE | jq -r -s -c 'sort_by(.cpuused|tonumber) | .[0] | .id'`
  LOWESTCLUSTERID=`echo $HOSTUSE | jq -r -s -c 'sort_by(.cpuused|tonumber) | .[0] | .clusterid'`
  LOWESTHOSTNAME=`cmk list hosts id=$LOWESTHOSTID | jq -r '.host[] | .name'`
  LOWESTCLUSTERNAME=`cmk list clusters id=$LOWESTCLUSTERID | jq -r '.cluster[] | .name'`
}

function least_host_mem()
{
  HOSTUSE=`cmk list hosts type=routing state=Up resourcestate=Enabled | jq '.host[]' | sed 's/\%//'`
  LOWESTHOSTID=`echo $HOSTUSE | jq -r -s -c 'sort_by(.memoryused) | .[0] | .id'`
  LOWESTCLUSTERID=`echo $HOSTUSE | jq -r -s -c 'sort_by(.memoryused) | .[0] | .clusterid'`
  LOWESTHOSTNAME=`cmk list hosts id=$LOWESTHOSTID | jq -r '.host[] | .name'`
  LOWESTCLUSTERNAME=`cmk list clusters id=$LOWESTCLUSTERID | jq -r '.cluster[] | .name'`
}

function least_host_in_cluster()
{
  HOSTUSE=`cmk list hosts type=routing state=Up resourcestate=Enabled | jq '.host[]' | sed 's/\%//'`
  LOWESTHOSTID=`echo $HOSTUSE | jq -r -s -c 'sort_by(.memoryused) | .[0] | .id'`
  LOWESTHOSTNAME=`cmk list hosts id=$LOWESTHOSTID | jq -r '.host[] | .name'`
}


################################################################################
# ReturnFact:
# Return parsed environment info
#
function ReturnFact()
{

cat << EOF
{
"ansible_facts": {
  "allocator_host_id": "${LOWESTHOSTID}",
  "allocator_cluster_id": "${LOWESTCLUSTERID}",
  "allocator_pod_id": "${LOWESTPODID}",
  "allocator_cluster_name": "${LOWESTCLUSTERNAME}",
  "allocator_host_name": "${LOWESTHOSTNAME}",
  "env_return": "success",
  "env_retmsg": "${MSG}"
 }
}
EOF
}

export TERM=vt100
cmk set display json
#cmk set color false


LOWESTCLUSTERID=""
LOWESTHOSTID=""
LOWESTPODID=""
## DO STUFF

case "$ALGORITHM" in
  least_host_cpu)
    least_host_cpu;
    MSG="Returning lowest used host in zone"
    ReturnFact;
  ;;
  least_host_mem)
    least_host_mem;
    MSG="Returning lowest used host in zone"
    ReturnFact;
  ;;
  least_host_least_cluster)
    least_cluster_mem;
    CLUSTERID=${LOWESTCLUSTERID}
    least_host_in_cluster;
    MSG="Returning lowest used host in lowest used cluster in zone"
    ReturnFact;
  ;;
  least_cluster_cpu)
    least_cluster_cpu;
    MSG="Returning lowest used cluster in zone"
    ReturnFact;
  ;;
  least_cluster_mem)
    least_cluster_mem;
    MSG="Returning lowest used cluster in zone"
    ReturnFact;
  ;;
  least_host_in_cluster)
    least_host_in_cluster;
    LOWESTCLUSTERID=${CLUSTERID}
    MSG="Returning lowest used host in given cluster"
    ReturnFact;
  ;;

esac
exit