#!/bin/bash
##############################################################
# Queries the environments database and returns network
# details. Returns existing network details if known, otherwise
# requests new environment details.
# Usage:
# envfacts.sh <req|rel> <env_db_ip> <env_db_user> <env_db_password> <env_database name> <env_uuid> <env_name_clean> <env_comment>
#####################################################################################
# Vars
#

ARGS="(`cat $1`)"

DBHOST=`echo $ARGS | tr " " "\n"| awk -F= '$1=="DBHOST"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
DBUSER=`echo $ARGS | tr " " "\n"| awk -F= '$1=="DBUSER"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
DBPASS=`echo $ARGS | tr " " "\n"| awk -F= '$1=="DBPASS"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
DBNAME=`echo $ARGS | tr " " "\n"| awk -F= '$1=="DBNAME"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
ENV_UUID=`echo $ARGS | tr " " "\n"| awk -F= '$1=="ENV_UUID"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
ENV_NAME=`echo $ARGS | tr " " "\n"| awk -F= '$1=="ENV_NAME"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
ENV_COMMENT=`echo $ARGS | tr " " "\n"| awk -F= '$1=="ENV_COMMENT"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
ENV_ACTION=`echo $ARGS | tr " " "\n"| awk -F= '$1=="ENV_ACTION"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`
ENV_ZONETYPE=`echo $ARGS | tr " " "\n"| awk -F= '$1=="ENV_ZONETYPE"{print $2}'| tr -d '"' | sed -e 's/[[:space:]]*$//'`

MYSQLCOMMAND="mysql -h${DBHOST} -u${DBUSER} -p${DBPASS} -s -N -e";
ENVTBL="environments";
PODTBL="podnetworks";
PUBTBL="pubnetworks";
PRITBL="primarystorage";
SECTBL="secondarystorage";
GUESTTBL="basicguestnetworks";

################################################################################
# checkNameExisting:
# Check envname currently being used

#
function checkNameExisting()
{

if [[ -z ${ENV_UUID} ]]; then
  env_name_count=`${MYSQLCOMMAND} "SELECT COUNT(*) FROM ${DBNAME}.${ENVTBL} WHERE name='${ENV_NAME}' and removed is NULL"`
else
  env_name_count=`${MYSQLCOMMAND} "SELECT COUNT(*) FROM ${DBNAME}.${ENVTBL} WHERE name='${ENV_NAME}' and removed is NULL and envuuid != '${ENV_UUID}'"`
fi
}

################################################################################

################################################################################
# countEnvAvailable
# Check that there is capacity in the DB

#
function countEnvAvailable()
{
  COUNTPODENVS=`${MYSQLCOMMAND} "SELECT COUNT(*) FROM ${DBNAME}.${PODTBL} WHERE inuse='FALSE' and removed IS NOT NULL"`
  COUNTPUBLICENVS=`${MYSQLCOMMAND} "SELECT COUNT(*) FROM ${DBNAME}.${PUBTBL} WHERE inuse='FALSE' and removed IS NOT NULL"`
  COUNTGUESTENVS=`${MYSQLCOMMAND} "SELECT COUNT(*) FROM ${DBNAME}.${GUESTTBL} WHERE inuse='FALSE' and removed IS NOT NULL"`
}

################################################################################


################################################################################
# QueryID:
# Check if the nested cloud instance has already been added to the environments
# table and not removed. Query is based on the nested cloud instance uuid in the group vars.
# The returned envid is always unique for the lifespan of the nested cloud.
#
function QueryID()
{
  local id
  if ! [ -z ${ENV_UUID} ]; then
    id=`${MYSQLCOMMAND} "SELECT id FROM ${DBNAME}.${ENVTBL} WHERE envuuid='${ENV_UUID}' and removed is NULL"`
  else
    id=`${MYSQLCOMMAND} "SELECT id FROM ${DBNAME}.${ENVTBL} WHERE name='${ENV_NAME}' and removed is NULL"`
  fi
  if [ -z ${id} ];
  then
    envid="notfound";
  else
    envid=${id}
  fi
}

################################################################################
# RequestID:
# Adds the nested cloud instance to the environments table and returns the unique
# env_id for assigning resources in the public and pod network tables.
#
function RequestID()
{
  local id
  # No locking required, simple insert
  ${MYSQLCOMMAND} "INSERT INTO ${DBNAME}.${ENVTBL} (name, envuuid, comment, created) VALUES ('${ENV_NAME}', '${ENV_UUID}', '${ENV_COMMENT}', now())";
  id=`${MYSQLCOMMAND} "SELECT id FROM ${DBNAME}.${ENVTBL} WHERE envuuid='${ENV_UUID}' and removed is NULL"`
  envid=${id}
}

################################################################################
# ReleaseID:
# Marks the nested group envinronment as removed.
#
function ReleaseID()
{
  local id

  id=`${MYSQLCOMMAND} "SELECT id FROM ${DBNAME}.${ENVTBL} WHERE envuuid='${ENV_UUID}' and removed is NULL"`
  if ! [ -z ${id} ];
  then
    ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${ENVTBL} set removed=now() where envuuid='${ENV_UUID}' and removed is NULL";
  fi
}

################################################################################
# RequestPodNet:
# Checks if a pod network has already been assigned to the nested cloud.
# If none assigned then new one is assigned if there are available resources.
#
function RequestPodNet()
{
  local podnetid
  local podnetdetails

  # Check if pod network has already been assigned
  podnetid=`${MYSQLCOMMAND} "SELECT idpod FROM ${DBNAME}.${PODTBL} WHERE inuse = 'TRUE' and envid = '${envid}'"`
  if [ -z ${podnetid} ];
  then # no existing found, request new
    ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${PODTBL} SET inuse='TRUE', envid='${envid}', updated=now(), removed=NULL, environmentname='${ENV_NAME}' WHERE inuse='FALSE' limit 1";
    # Check if update made
    podnetid=`${MYSQLCOMMAND} "SELECT idpod FROM ${DBNAME}.${PODTBL} WHERE envid='${envid}' and inuse='TRUE'"`
    if [ -z ${podnetid} ];
    then #no free pod network blocks
      ReleaseNetworks;
      ReturnFail "No free pod network blocks.";
      exit;
    fi
  fi
  podnetdetails=`${MYSQLCOMMAND} "SELECT * FROM ${DBNAME}.${PODTBL} WHERE idpod = '${podnetid}'" | sed -e "s/\t/|/g"`
  env_podstartip=`echo ${podnetdetails} | awk -F'|' '{print $2}'`
  env_podendip=`echo ${podnetdetails} | awk -F'|' '{print $3}'`
  env_podmask=`echo ${podnetdetails} | awk -F'|' '{print $4}'`
  env_podgw=`echo ${podnetdetails} | awk -F'|' '{print $5}'`
  env_podvlans=`echo ${podnetdetails} | awk -F'|' '{print $7}'`
}


################################################################################
# RequestPodNet:
# Checks if a pod network has already been assigned to the nested cloud.
# If none assigned then new one is assigned if there are available resources.
#
function RequestGuestNet()
{
  local guestnetid
  local guestdetails

  # Check if guest network has already been assigned
  guestnetid=`${MYSQLCOMMAND} "SELECT idguestnet FROM ${DBNAME}.${GUESTTBL} WHERE inuse = 'TRUE' and envid = '${envid}'"`
  if [ -z ${podnetid} ];
  then # no existing found, request new
    ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${GUESTTBL} SET inuse='TRUE', envid='${envid}', updated=now(), removed=NULL, environmentname='${ENV_NAME}' WHERE inuse='FALSE' limit 1";
    # Check if update made
    guestnetid=`${MYSQLCOMMAND} "SELECT idguestnet FROM ${DBNAME}.${GUESTTBL} WHERE envid='${envid}' and inuse='TRUE'"`
    if [ -z ${guestnetid} ];
    then #no free pod network blocks
      ReleaseNetworks;
      ReturnFail "No free guest network blocks.";
      exit;
    fi
  fi
  guestnetdetails=`${MYSQLCOMMAND} "SELECT * FROM ${DBNAME}.${GUESTTBL} WHERE idguestnet = '${guestnetid}'" | sed -e "s/\t/|/g"`
  env_guestnetstartip=`echo ${guestnetdetails} | awk -F'|' '{print $2}'`
  env_guestnetendip=`echo ${guestnetdetails} | awk -F'|' '{print $3}'`
  env_guestnetmask=`echo ${guestnetdetails} | awk -F'|' '{print $4}'`
  env_guestnetgw=`echo ${guestnetdetails} | awk -F'|' '{print $5}'`
  env_guestnetvlan=`echo ${guestnetdetails} | awk -F'|' '{print $7}'`

  env_pubstartip="na"
  env_pubendip="na"
  env_pubmask="na"
  env_pubgw="na"
  env_pubvlan="na"
}


################################################################################
# ReleaseNetworks:
# Releases pod and public networks on nested cloud destroy.
#
function ReleaseNetworks()
{
  ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${PODTBL} SET inuse='FALSE', envid=NULL, updated=now(), removed=now(), comment=NULL, environmentname=NULL WHERE envid='${envid}'";
  ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${PUBTBL} SET inuse='FALSE', envid=NULL, updated=now(), removed=now(), comment=NULL, environmentname=NULL WHERE envid='${envid}'";
  ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${GUESTTBL} SET inuse='FALSE', envid=NULL, updated=now(), removed=now(), comment=NULL, environmentname=NULL WHERE envid='${envid}'";
}

################################################################################
# RequestPubNet:
# Checks if a public network has already been assigned to the nested cloud.
# If none assigned then new one is assigned if there are available resources.
#
function RequestPubNet()
{
  local pubnetid
  local pubnetdetails

  # Check if pub network has already been assigned
  pubnetid=`${MYSQLCOMMAND} "SELECT idpub FROM ${DBNAME}.${PUBTBL} WHERE inuse = 'TRUE' and envid = '${envid}'"`
  if [ -z ${pubnetid} ];
  then #no existing found, request new
    ${MYSQLCOMMAND} "UPDATE ${DBNAME}.${PUBTBL} SET inuse='TRUE', envid='${envid}', updated=now(), removed=NULL, environmentname='${ENV_NAME}' WHERE inuse='FALSE' limit 1";
    # Check if update made
    pubnetid=`${MYSQLCOMMAND} "SELECT idpub FROM ${DBNAME}.${PUBTBL} WHERE envid='${envid}' and inuse='TRUE'"`
    if [ -z ${pubnetid} ];
    then #no free public networks
      ReleaseNetworks;
      ReturnFail "No free public network blocks.";
      exit;
    fi
  fi
  pubnetdetails=`${MYSQLCOMMAND} "SELECT * FROM ${DBNAME}.${PUBTBL} WHERE idpub = '${pubnetid}'" | sed -e "s/\t/|/g"`
  env_pubstartip=`echo ${pubnetdetails} | awk -F'|' '{print $2}'`
  env_pubendip=`echo ${pubnetdetails} | awk -F'|' '{print $3}'`
  env_pubmask=`echo ${pubnetdetails} | awk -F'|' '{print $4}'`
  env_pubgw=`echo ${pubnetdetails} | awk -F'|' '{print $5}'`
  env_pubvlan=`echo ${pubnetdetails} | awk -F'|' '{print $7}'`

  env_guestnetstartip="na"
  env_guestnetendip="na"
  env_guestnetmask="na"
  env_guestnetgw="na"
  env_guestnetvlan="na"

}

################################################################################
# ReturnFact:
# Return parsed environment info
#
function ReturnFact()
{
cat << EOF
{
"ansible_facts": {
  "env_id": "${envid}",
  "env_type": "$ENV_ZONETYPE",
  "env_podstartip": "${env_podstartip}",
  "env_podendip": "${env_podendip}",
  "env_podmask": "${env_podmask}",
  "env_podgw": "${env_podgw}",
  "env_podvlans": "${env_podvlans}",
  "env_guestnetstartip": "${env_guestnetstartip}",
  "env_guestnetendip": "${env_guestnetendip}",
  "env_guestnetmask": "${env_guestnetmask}",
  "env_guestnetgw": "${env_guestnetgw}",
  "env_guestnetvlan": "${env_guestnetvlan}",
  "env_pubstartip": "${env_pubstartip}",
  "env_pubendip": "${env_pubendip}",
  "env_pubmask": "${env_pubmask}",
  "env_pubgw": "${env_pubgw}",
  "env_pubvlan": "${env_pubvlan}",
  "env_return": "success",
  "env_retmsg": "Networks successfully reserved."
 }
}
EOF
}

################################################################################
# ReturnFail:
# Returns error message as fact
#
function ReturnFail()
{
cat << EOF
{
"ansible_facts": {
  "env_return": "error",
  "env_retmsg": "$1"
}
}
EOF
}

################################################################################
# ReturnSuccess:
# Returns generic success message as fact
#
function ReturnSuccess()
{
cat << EOF
{
"ansible_facts": {
  "env_return": "success",
  "env_retmsg": "$1"
}
}
EOF
}

################################################################################

function returnAvailableCount()
{

if [[ $COUNTPODENVS -gt 0 ]] && [[ $COUNTPUBLICENVS -gt 0 ]] && [[ ${env_name_count} -eq 0 ]]  && [[ ${COUNTGUESTENVS} -gt 0 ]]; then
echo "
{
\"ansible_facts\": {
  \"env_return\": \"success\",
  \"env_retmsg\": \"env_name not in use and environment ranges are currently available\","
else
echo "
{
\"ansible_facts\": {
  \"env_return\": \"warning\",
  \"env_retmsg\": \"WARNING !! There are currently not enough environments in the DB to create this environment right now.\","
fi
echo "  \"available_env_pods_count\": \"$COUNTPODENVS\",
  \"available_env_pubips_count\": \"$COUNTPUBLICENVS\",
  \"available_env_guestips_count\": \"$COUNTGUESTENVS\"
  }
}"
}


################################################################################

# Main script
#
case "$ENV_ACTION" in
	req)
	  checkNameExisting;
          if [[ ${env_name_count} -gt 0 ]];
          then
            ReturnFail "The environment ${ENV_NAME} is currently in use with a different UUID ($ENV_UUID). Please rename this environment or remove existing environment ";
	  else
	    QueryID;
    	    if [ ${envid} == "notfound" ];
	    then
	      RequestID;
	    fi
            if [[ "$ENV_ZONETYPE" == "basic" ]];then
              RequestGuestNet;
            else
              RequestPubNet;
            fi
            RequestPodNet;
            ReturnFact;
         fi
       ;;

	retrieve)
	  QueryID;
    	  if [ ${envid} == "notfound" ];
	  then
	    ReturnFail "${ENV_NAME} With UUID $ENV_UUID not found";
	  fi
          if [[ "$ENV_ZONETYPE" == "basic" ]];then
            RequestGuestNet;
          else
            RequestPubNet;
          fi
          RequestPodNet;
          ReturnFact;
        ;;

       rel)
       QueryID;
       if [ ${envid} != "notfound" ];
       then
         ReleaseNetworks;
         ReleaseID;
       fi
       ReturnSuccess "Environment ${ENV_NAME} (${ENV_UUID}) and all networks removed from database.";
       ;;

	check)
	  checkNameExisting;
          if [[ ${env_name_count} -gt 0 ]];
          then
            ReturnFail "The environment ${ENV_NAME} is currently in use. Please rename this environment or remove existing environment ";
	  else
            countEnvAvailable;
            returnAvailableCount;
          fi
	;;

       forced_rel)
	QueryID
    	  if [ ${envid} == "notfound" ];
	  then
	    ReturnFail "${ENV_NAME} not found";
	  else
	    ReleaseNetworks;
            ReleaseID;
            ReturnSuccess "Environment ${ENV_NAME} and all networks removed from database.";
         fi
       ;;

       *)
       ReturnFail "Unknown input action $1 - valid options are req|rel|retrieve|check|forced_rel.";
       ;;
esac
exit
